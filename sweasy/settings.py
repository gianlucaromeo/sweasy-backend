"""
Django settings for sweasy project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b)0is6@0n4v)eiyd6)rwjfw36)=emj3%l(u6)o^**_dzp2v*n('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Collection of custom extensions for the Django Framework (management 
    # commands, additional database fields, admin extensions and much more).
    'django_extensions',

    'rest_framework',

    'catalog',

    'accounts',

    'django.contrib.admin',
    
    'django.contrib.sites',
    
    # Authentication framework and its default models.
    # - Four default permissions are created for each model (add, change, delete, view)
    # Note: This is required for 'allauth'.
    'django.contrib.auth',
    
    # Allows permissions to be associated with models.
    'django.contrib.contenttypes',

    'django.contrib.sessions',

    # Note: This is required for 'allauth'.
    'django.contrib.messages',

    'django.contrib.staticfiles',
    
    'allauth',
    'allauth.account',
    'allauth.headless'
]

SITE_ID = 1
DEFAULT_FROM_EMAIL = 'no-reply@sweasy.com'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# Optional helpers during dev:
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# In case you need to point these to your own frontend application, you can do 
# so by configuring this setting.
# HEADLESS_FRONTEND_URLS = {
    # "account_confirm_email": "http://127.0.0.1:8000/_allauth/app/v1/auth/email/verify/{key}/",
    # "account_reset_password": "http://127.0.0.1:8000/accounts/password/reset/",
    # "account_reset_password_from_key": "http://127.0.0.1:8000/accounts/password/reset/confirm/{key}/",
    # "account_signup": "http://127.0.0.1:8000/accounts/signup/",
# }

# Use True if your application fully takes care of the frontend, and you don't
# want for e.g. the login and signup views to be accessible.
# In this case, including allauth.urls skips those views, yet, still includes
# e.g. the provider callback views.
HEADLESS_ONLY = False

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    
    # Manages sessions across requests.
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.common.CommonMiddleware',

    'django.middleware.csrf.CsrfViewMiddleware',
    
    #Â Associates users with requests using sessions.
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    'django.contrib.messages.middleware.MessageMiddleware',

    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'sweasy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            # A list of callables that take a request object as their argument 
            # and return a dictionary of items to be merged into the context.
            # Note: Each context processor is applied in order.
            'context_processors': [
                # This allows RequestContext to contain "request".
                # Note: This is required by 'allauth'.
                'django.template.context_processors.request',
                
                # This allows RequestContext to contain "user", "perms".
                'django.contrib.auth.context_processors.auth',
                
                # This allows RequestContext to contain "messages" and 
                # "DEFAULT_MESSAGE_LEVELS".
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sweasy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'accounts.User'